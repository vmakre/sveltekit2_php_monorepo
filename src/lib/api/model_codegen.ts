/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/records/actor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list actor */
        get: operations["list_actor"];
        put?: never;
        /** @description create actor */
        post: operations["create_actor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/actor/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read actor */
        get: operations["read_actor"];
        /** @description update actor */
        put: operations["update_actor"];
        post?: never;
        /** @description delete actor */
        delete: operations["delete_actor"];
        options?: never;
        head?: never;
        /** @description increment actor */
        patch: operations["increment_actor"];
        trace?: never;
    };
    "/records/actor_info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list actor_info */
        get: operations["list_actor_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list address */
        get: operations["list_address"];
        put?: never;
        /** @description create address */
        post: operations["create_address"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/address/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read address */
        get: operations["read_address"];
        /** @description update address */
        put: operations["update_address"];
        post?: never;
        /** @description delete address */
        delete: operations["delete_address"];
        options?: never;
        head?: never;
        /** @description increment address */
        patch: operations["increment_address"];
        trace?: never;
    };
    "/records/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list category */
        get: operations["list_category"];
        put?: never;
        /** @description create category */
        post: operations["create_category"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/category/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read category */
        get: operations["read_category"];
        /** @description update category */
        put: operations["update_category"];
        post?: never;
        /** @description delete category */
        delete: operations["delete_category"];
        options?: never;
        head?: never;
        /** @description increment category */
        patch: operations["increment_category"];
        trace?: never;
    };
    "/records/city": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list city */
        get: operations["list_city"];
        put?: never;
        /** @description create city */
        post: operations["create_city"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/city/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read city */
        get: operations["read_city"];
        /** @description update city */
        put: operations["update_city"];
        post?: never;
        /** @description delete city */
        delete: operations["delete_city"];
        options?: never;
        head?: never;
        /** @description increment city */
        patch: operations["increment_city"];
        trace?: never;
    };
    "/records/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list country */
        get: operations["list_country"];
        put?: never;
        /** @description create country */
        post: operations["create_country"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/country/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read country */
        get: operations["read_country"];
        /** @description update country */
        put: operations["update_country"];
        post?: never;
        /** @description delete country */
        delete: operations["delete_country"];
        options?: never;
        head?: never;
        /** @description increment country */
        patch: operations["increment_country"];
        trace?: never;
    };
    "/records/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list customer */
        get: operations["list_customer"];
        put?: never;
        /** @description create customer */
        post: operations["create_customer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/customer/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read customer */
        get: operations["read_customer"];
        /** @description update customer */
        put: operations["update_customer"];
        post?: never;
        /** @description delete customer */
        delete: operations["delete_customer"];
        options?: never;
        head?: never;
        /** @description increment customer */
        patch: operations["increment_customer"];
        trace?: never;
    };
    "/records/customer_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list customer_list */
        get: operations["list_customer_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list film */
        get: operations["list_film"];
        put?: never;
        /** @description create film */
        post: operations["create_film"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read film */
        get: operations["read_film"];
        /** @description update film */
        put: operations["update_film"];
        post?: never;
        /** @description delete film */
        delete: operations["delete_film"];
        options?: never;
        head?: never;
        /** @description increment film */
        patch: operations["increment_film"];
        trace?: never;
    };
    "/records/film_actor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list film_actor */
        get: operations["list_film_actor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film_category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list film_category */
        get: operations["list_film_category"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list film_list */
        get: operations["list_film_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film_text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list film_text */
        get: operations["list_film_text"];
        put?: never;
        /** @description create film_text */
        post: operations["create_film_text"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/film_text/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read film_text */
        get: operations["read_film_text"];
        /** @description update film_text */
        put: operations["update_film_text"];
        post?: never;
        /** @description delete film_text */
        delete: operations["delete_film_text"];
        options?: never;
        head?: never;
        /** @description increment film_text */
        patch: operations["increment_film_text"];
        trace?: never;
    };
    "/records/inventory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list inventory */
        get: operations["list_inventory"];
        put?: never;
        /** @description create inventory */
        post: operations["create_inventory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/inventory/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read inventory */
        get: operations["read_inventory"];
        /** @description update inventory */
        put: operations["update_inventory"];
        post?: never;
        /** @description delete inventory */
        delete: operations["delete_inventory"];
        options?: never;
        head?: never;
        /** @description increment inventory */
        patch: operations["increment_inventory"];
        trace?: never;
    };
    "/records/language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list language */
        get: operations["list_language"];
        put?: never;
        /** @description create language */
        post: operations["create_language"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/language/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read language */
        get: operations["read_language"];
        /** @description update language */
        put: operations["update_language"];
        post?: never;
        /** @description delete language */
        delete: operations["delete_language"];
        options?: never;
        head?: never;
        /** @description increment language */
        patch: operations["increment_language"];
        trace?: never;
    };
    "/records/nicer_but_slower_film_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list nicer_but_slower_film_list */
        get: operations["list_nicer_but_slower_film_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list payment */
        get: operations["list_payment"];
        put?: never;
        /** @description create payment */
        post: operations["create_payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/payment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read payment */
        get: operations["read_payment"];
        /** @description update payment */
        put: operations["update_payment"];
        post?: never;
        /** @description delete payment */
        delete: operations["delete_payment"];
        options?: never;
        head?: never;
        /** @description increment payment */
        patch: operations["increment_payment"];
        trace?: never;
    };
    "/records/rental": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list rental */
        get: operations["list_rental"];
        put?: never;
        /** @description create rental */
        post: operations["create_rental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/rental/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read rental */
        get: operations["read_rental"];
        /** @description update rental */
        put: operations["update_rental"];
        post?: never;
        /** @description delete rental */
        delete: operations["delete_rental"];
        options?: never;
        head?: never;
        /** @description increment rental */
        patch: operations["increment_rental"];
        trace?: never;
    };
    "/records/sales_by_film_category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list sales_by_film_category */
        get: operations["list_sales_by_film_category"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/sales_by_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list sales_by_store */
        get: operations["list_sales_by_store"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/staff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list staff */
        get: operations["list_staff"];
        put?: never;
        /** @description create staff */
        post: operations["create_staff"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/staff/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read staff */
        get: operations["read_staff"];
        /** @description update staff */
        put: operations["update_staff"];
        post?: never;
        /** @description delete staff */
        delete: operations["delete_staff"];
        options?: never;
        head?: never;
        /** @description increment staff */
        patch: operations["increment_staff"];
        trace?: never;
    };
    "/records/staff_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list staff_list */
        get: operations["list_staff_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list store */
        get: operations["list_store"];
        put?: never;
        /** @description create store */
        post: operations["create_store"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/store/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read store */
        get: operations["read_store"];
        /** @description update store */
        put: operations["update_store"];
        post?: never;
        /** @description delete store */
        delete: operations["delete_store"];
        options?: never;
        head?: never;
        /** @description increment store */
        patch: operations["increment_store"];
        trace?: never;
    };
    "/records/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description list users */
        get: operations["list_users"];
        put?: never;
        /** @description create users */
        post: operations["create_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/records/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description read users */
        get: operations["read_users"];
        /** @description update users */
        put: operations["update_users"];
        post?: never;
        /** @description delete users */
        delete: operations["delete_users"];
        options?: never;
        head?: never;
        /** @description increment users */
        patch: operations["increment_users"];
        trace?: never;
    };
    "/status/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request API 'ping' status */
        get: operations["ping_status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "list-actor": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                actor_id?: number;
                first_name?: string;
                last_name?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-actor": {
            /** Format: int32 */
            actor_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-actor": {
            /** Format: int32 */
            actor_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-actor": {
            /** Format: int32 */
            actor_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-actor": {
            /** Format: int32 */
            actor_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-actor_info": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                actor_id?: number;
                first_name?: string;
                last_name?: string;
                /** Format: large-string */
                film_info?: string;
            }[];
        };
        "list-address": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                address_id?: number;
                address?: string;
                address2?: string | null;
                district?: string;
                /** Format: int32 */
                city_id?: number;
                postal_code?: string | null;
                phone?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-address": {
            /** Format: int32 */
            address_id?: number;
            address?: string;
            address2?: string | null;
            district?: string;
            /** Format: int32 */
            city_id?: number;
            postal_code?: string | null;
            phone?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-address": {
            /** Format: int32 */
            address_id?: number;
            address?: string;
            address2?: string | null;
            district?: string;
            /** Format: int32 */
            city_id?: number;
            postal_code?: string | null;
            phone?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-address": {
            /** Format: int32 */
            address_id?: number;
            address?: string;
            address2?: string | null;
            district?: string;
            /** Format: int32 */
            city_id?: number;
            postal_code?: string | null;
            phone?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-address": {
            /** Format: int32 */
            address_id?: number;
            address?: string;
            address2?: string | null;
            district?: string;
            /** Format: int32 */
            city_id?: number;
            postal_code?: string | null;
            phone?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-category": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                category_id?: number;
                name?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-category": {
            /** Format: int32 */
            category_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-category": {
            /** Format: int32 */
            category_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-category": {
            /** Format: int32 */
            category_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-category": {
            /** Format: int32 */
            category_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-city": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                city_id?: number;
                city?: string;
                /** Format: int32 */
                country_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-city": {
            /** Format: int32 */
            city_id?: number;
            city?: string;
            /** Format: int32 */
            country_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "read-city": {
            /** Format: int32 */
            city_id?: number;
            city?: string;
            /** Format: int32 */
            country_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "update-city": {
            /** Format: int32 */
            city_id?: number;
            city?: string;
            /** Format: int32 */
            country_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-city": {
            /** Format: int32 */
            city_id?: number;
            city?: string;
            /** Format: int32 */
            country_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "list-country": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                country_id?: number;
                country?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-country": {
            /** Format: int32 */
            country_id?: number;
            country?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-country": {
            /** Format: int32 */
            country_id?: number;
            country?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-country": {
            /** Format: int32 */
            country_id?: number;
            country?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-country": {
            /** Format: int32 */
            country_id?: number;
            country?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-customer": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                customer_id?: number;
                /** Format: int32 */
                store_id?: number;
                first_name?: string;
                last_name?: string;
                email?: string | null;
                /** Format: int32 */
                address_id?: number;
                active?: boolean;
                /** Format: date-time */
                create_date?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-customer": {
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            store_id?: number;
            first_name?: string;
            last_name?: string;
            email?: string | null;
            /** Format: int32 */
            address_id?: number;
            active?: boolean;
            /** Format: date-time */
            create_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-customer": {
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            store_id?: number;
            first_name?: string;
            last_name?: string;
            email?: string | null;
            /** Format: int32 */
            address_id?: number;
            active?: boolean;
            /** Format: date-time */
            create_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-customer": {
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            store_id?: number;
            first_name?: string;
            last_name?: string;
            email?: string | null;
            /** Format: int32 */
            address_id?: number;
            active?: boolean;
            /** Format: date-time */
            create_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-customer": {
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            store_id?: number;
            first_name?: string;
            last_name?: string;
            email?: string | null;
            /** Format: int32 */
            address_id?: number;
            active?: boolean;
            /** Format: date-time */
            create_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-customer_list": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                ID?: number;
                name?: string;
                address?: string;
                "zip code"?: string;
                phone?: string;
                city?: string;
                country?: string;
                notes?: string;
                /** Format: int32 */
                SID?: number;
            }[];
        };
        "list-film": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                film_id?: number;
                title?: string;
                /** Format: large-string */
                description?: string | null;
                /** Format: int32 */
                release_year?: number | null;
                /** Format: int32 */
                language_id?: number;
                /** Format: int32 */
                original_language_id?: number | null;
                /** Format: int32 */
                rental_duration?: number;
                /** Format: decimal */
                rental_rate?: string;
                /** Format: int32 */
                length?: number | null;
                /** Format: decimal */
                replacement_cost?: string;
                rating?: string | null;
                special_features?: string | null;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-film": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
            /** Format: int32 */
            release_year?: number | null;
            /** Format: int32 */
            language_id?: number;
            /** Format: int32 */
            original_language_id?: number | null;
            /** Format: int32 */
            rental_duration?: number;
            /** Format: decimal */
            rental_rate?: string;
            /** Format: int32 */
            length?: number | null;
            /** Format: decimal */
            replacement_cost?: string;
            rating?: string | null;
            special_features?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "read-film": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
            /** Format: int32 */
            release_year?: number | null;
            /** Format: int32 */
            language_id?: number;
            /** Format: int32 */
            original_language_id?: number | null;
            /** Format: int32 */
            rental_duration?: number;
            /** Format: decimal */
            rental_rate?: string;
            /** Format: int32 */
            length?: number | null;
            /** Format: decimal */
            replacement_cost?: string;
            rating?: string | null;
            special_features?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "update-film": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
            /** Format: int32 */
            release_year?: number | null;
            /** Format: int32 */
            language_id?: number;
            /** Format: int32 */
            original_language_id?: number | null;
            /** Format: int32 */
            rental_duration?: number;
            /** Format: decimal */
            rental_rate?: string;
            /** Format: int32 */
            length?: number | null;
            /** Format: decimal */
            replacement_cost?: string;
            rating?: string | null;
            special_features?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-film": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
            /** Format: int32 */
            release_year?: number | null;
            /** Format: int32 */
            language_id?: number;
            /** Format: int32 */
            original_language_id?: number | null;
            /** Format: int32 */
            rental_duration?: number;
            /** Format: decimal */
            rental_rate?: string;
            /** Format: int32 */
            length?: number | null;
            /** Format: decimal */
            replacement_cost?: string;
            rating?: string | null;
            special_features?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "list-film_actor": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                actor_id?: number;
                /** Format: int32 */
                film_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "list-film_category": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                film_id?: number;
                /** Format: int32 */
                category_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "list-film_list": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                FID?: number;
                title?: string;
                /** Format: large-string */
                description?: string;
                category?: string;
                /** Format: decimal */
                price?: string;
                /** Format: int32 */
                length?: number;
                rating?: string;
                /** Format: large-string */
                actors?: string;
            }[];
        };
        "list-film_text": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                film_id?: number;
                title?: string;
                /** Format: large-string */
                description?: string | null;
            }[];
        };
        "create-film_text": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
        };
        "read-film_text": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
        };
        "update-film_text": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
        };
        "increment-film_text": {
            /** Format: int32 */
            film_id?: number;
            title?: string;
            /** Format: large-string */
            description?: string | null;
        };
        "list-inventory": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                inventory_id?: number;
                /** Format: int32 */
                film_id?: number;
                /** Format: int32 */
                store_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-inventory": {
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            film_id?: number;
            /** Format: int32 */
            store_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "read-inventory": {
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            film_id?: number;
            /** Format: int32 */
            store_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "update-inventory": {
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            film_id?: number;
            /** Format: int32 */
            store_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-inventory": {
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            film_id?: number;
            /** Format: int32 */
            store_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "list-language": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                language_id?: number;
                name?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-language": {
            /** Format: int32 */
            language_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-language": {
            /** Format: int32 */
            language_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-language": {
            /** Format: int32 */
            language_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-language": {
            /** Format: int32 */
            language_id?: number;
            name?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-nicer_but_slower_film_list": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                FID?: number;
                title?: string;
                /** Format: large-string */
                description?: string;
                category?: string;
                /** Format: decimal */
                price?: string;
                /** Format: int32 */
                length?: number;
                rating?: string;
                /** Format: large-string */
                actors?: string;
            }[];
        };
        "list-payment": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                payment_id?: number;
                /** Format: int32 */
                customer_id?: number;
                /** Format: int32 */
                staff_id?: number;
                /** Format: int32 */
                rental_id?: number | null;
                /** Format: decimal */
                amount?: string;
                /** Format: date-time */
                payment_date?: string;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-payment": {
            /** Format: int32 */
            payment_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            staff_id?: number;
            /** Format: int32 */
            rental_id?: number | null;
            /** Format: decimal */
            amount?: string;
            /** Format: date-time */
            payment_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "read-payment": {
            /** Format: int32 */
            payment_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            staff_id?: number;
            /** Format: int32 */
            rental_id?: number | null;
            /** Format: decimal */
            amount?: string;
            /** Format: date-time */
            payment_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "update-payment": {
            /** Format: int32 */
            payment_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            staff_id?: number;
            /** Format: int32 */
            rental_id?: number | null;
            /** Format: decimal */
            amount?: string;
            /** Format: date-time */
            payment_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-payment": {
            /** Format: int32 */
            payment_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: int32 */
            staff_id?: number;
            /** Format: int32 */
            rental_id?: number | null;
            /** Format: decimal */
            amount?: string;
            /** Format: date-time */
            payment_date?: string;
            /** Format: date-time */
            last_update?: string;
        };
        "list-rental": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                rental_id?: number;
                /** Format: date-time */
                rental_date?: string;
                /** Format: int32 */
                inventory_id?: number;
                /** Format: int32 */
                customer_id?: number;
                /** Format: date-time */
                return_date?: string | null;
                /** Format: int32 */
                staff_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-rental": {
            /** Format: int32 */
            rental_id?: number;
            /** Format: date-time */
            rental_date?: string;
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: date-time */
            return_date?: string | null;
            /** Format: int32 */
            staff_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "read-rental": {
            /** Format: int32 */
            rental_id?: number;
            /** Format: date-time */
            rental_date?: string;
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: date-time */
            return_date?: string | null;
            /** Format: int32 */
            staff_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "update-rental": {
            /** Format: int32 */
            rental_id?: number;
            /** Format: date-time */
            rental_date?: string;
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: date-time */
            return_date?: string | null;
            /** Format: int32 */
            staff_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-rental": {
            /** Format: int32 */
            rental_id?: number;
            /** Format: date-time */
            rental_date?: string;
            /** Format: int32 */
            inventory_id?: number;
            /** Format: int32 */
            customer_id?: number;
            /** Format: date-time */
            return_date?: string | null;
            /** Format: int32 */
            staff_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "list-sales_by_film_category": {
            /** Format: int64 */
            results?: number;
            records?: {
                category?: string;
                /** Format: decimal */
                total_sales?: string;
            }[];
        };
        "list-sales_by_store": {
            /** Format: int64 */
            results?: number;
            records?: {
                store?: string;
                manager?: string;
                /** Format: decimal */
                total_sales?: string;
            }[];
        };
        "list-staff": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                staff_id?: number;
                first_name?: string;
                last_name?: string;
                /** Format: int32 */
                address_id?: number;
                /** Format: large-byte */
                picture?: string | null;
                email?: string | null;
                /** Format: int32 */
                store_id?: number;
                active?: boolean;
                username?: string;
                password?: string | null;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-staff": {
            /** Format: int32 */
            staff_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: int32 */
            address_id?: number;
            /** Format: large-byte */
            picture?: string | null;
            email?: string | null;
            /** Format: int32 */
            store_id?: number;
            active?: boolean;
            username?: string;
            password?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "read-staff": {
            /** Format: int32 */
            staff_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: int32 */
            address_id?: number;
            /** Format: large-byte */
            picture?: string | null;
            email?: string | null;
            /** Format: int32 */
            store_id?: number;
            active?: boolean;
            username?: string;
            password?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "update-staff": {
            /** Format: int32 */
            staff_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: int32 */
            address_id?: number;
            /** Format: large-byte */
            picture?: string | null;
            email?: string | null;
            /** Format: int32 */
            store_id?: number;
            active?: boolean;
            username?: string;
            password?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-staff": {
            /** Format: int32 */
            staff_id?: number;
            first_name?: string;
            last_name?: string;
            /** Format: int32 */
            address_id?: number;
            /** Format: large-byte */
            picture?: string | null;
            email?: string | null;
            /** Format: int32 */
            store_id?: number;
            active?: boolean;
            username?: string;
            password?: string | null;
            /** Format: date-time */
            last_update?: string;
        };
        "list-staff_list": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                ID?: number;
                name?: string;
                address?: string;
                "zip code"?: string;
                phone?: string;
                city?: string;
                country?: string;
                /** Format: int32 */
                SID?: number;
            }[];
        };
        "list-store": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                store_id?: number;
                /** Format: int32 */
                manager_staff_id?: number;
                /** Format: int32 */
                address_id?: number;
                /** Format: date-time */
                last_update?: string;
            }[];
        };
        "create-store": {
            /** Format: int32 */
            store_id?: number;
            /** Format: int32 */
            manager_staff_id?: number;
            /** Format: int32 */
            address_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "read-store": {
            /** Format: int32 */
            store_id?: number;
            /** Format: int32 */
            manager_staff_id?: number;
            /** Format: int32 */
            address_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "update-store": {
            /** Format: int32 */
            store_id?: number;
            /** Format: int32 */
            manager_staff_id?: number;
            /** Format: int32 */
            address_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "increment-store": {
            /** Format: int32 */
            store_id?: number;
            /** Format: int32 */
            manager_staff_id?: number;
            /** Format: int32 */
            address_id?: number;
            /** Format: date-time */
            last_update?: string;
        };
        "list-users": {
            /** Format: int64 */
            results?: number;
            records?: {
                /** Format: int32 */
                id?: number;
                username?: string;
                password?: string;
                /** Format: date-time */
                created?: string;
            }[];
        };
        "create-users": {
            /** Format: int32 */
            id?: number;
            username?: string;
            password?: string;
            /** Format: date-time */
            created?: string;
        };
        "read-users": {
            /** Format: int32 */
            id?: number;
            username?: string;
            password?: string;
            /** Format: date-time */
            created?: string;
        };
        "update-users": {
            /** Format: int32 */
            id?: number;
            username?: string;
            password?: string;
            /** Format: date-time */
            created?: string;
        };
        "increment-users": {
            /** Format: int32 */
            id?: number;
            username?: string;
            password?: string;
            /** Format: date-time */
            created?: string;
        };
        "ping-status": {
            /** Format: int64 */
            db: number;
            /** Format: int64 */
            cache: number;
        };
    };
    responses: {
        /** @description inserted primary key value (integer) */
        pk_integer: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": number;
            };
        };
        /** @description inserted primary key value (string) */
        pk_string: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": string;
            };
        };
        /** @description number of rows affected (integer) */
        rows_affected: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": number;
            };
        };
        /** @description list of actor records */
        "list-actor": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-actor"];
            };
        };
        /** @description single actor record */
        "read-actor": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-actor"];
            };
        };
        /** @description list of actor_info records */
        "list-actor_info": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-actor_info"];
            };
        };
        /** @description list of address records */
        "list-address": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-address"];
            };
        };
        /** @description single address record */
        "read-address": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-address"];
            };
        };
        /** @description list of category records */
        "list-category": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-category"];
            };
        };
        /** @description single category record */
        "read-category": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-category"];
            };
        };
        /** @description list of city records */
        "list-city": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-city"];
            };
        };
        /** @description single city record */
        "read-city": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-city"];
            };
        };
        /** @description list of country records */
        "list-country": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-country"];
            };
        };
        /** @description single country record */
        "read-country": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-country"];
            };
        };
        /** @description list of customer records */
        "list-customer": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-customer"];
            };
        };
        /** @description single customer record */
        "read-customer": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-customer"];
            };
        };
        /** @description list of customer_list records */
        "list-customer_list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-customer_list"];
            };
        };
        /** @description list of film records */
        "list-film": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-film"];
            };
        };
        /** @description single film record */
        "read-film": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-film"];
            };
        };
        /** @description list of film_actor records */
        "list-film_actor": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-film_actor"];
            };
        };
        /** @description list of film_category records */
        "list-film_category": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-film_category"];
            };
        };
        /** @description list of film_list records */
        "list-film_list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-film_list"];
            };
        };
        /** @description list of film_text records */
        "list-film_text": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-film_text"];
            };
        };
        /** @description single film_text record */
        "read-film_text": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-film_text"];
            };
        };
        /** @description list of inventory records */
        "list-inventory": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-inventory"];
            };
        };
        /** @description single inventory record */
        "read-inventory": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-inventory"];
            };
        };
        /** @description list of language records */
        "list-language": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-language"];
            };
        };
        /** @description single language record */
        "read-language": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-language"];
            };
        };
        /** @description list of nicer_but_slower_film_list records */
        "list-nicer_but_slower_film_list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-nicer_but_slower_film_list"];
            };
        };
        /** @description list of payment records */
        "list-payment": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-payment"];
            };
        };
        /** @description single payment record */
        "read-payment": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-payment"];
            };
        };
        /** @description list of rental records */
        "list-rental": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-rental"];
            };
        };
        /** @description single rental record */
        "read-rental": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-rental"];
            };
        };
        /** @description list of sales_by_film_category records */
        "list-sales_by_film_category": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-sales_by_film_category"];
            };
        };
        /** @description list of sales_by_store records */
        "list-sales_by_store": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-sales_by_store"];
            };
        };
        /** @description list of staff records */
        "list-staff": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-staff"];
            };
        };
        /** @description single staff record */
        "read-staff": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-staff"];
            };
        };
        /** @description list of staff_list records */
        "list-staff_list": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-staff_list"];
            };
        };
        /** @description list of store records */
        "list-store": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-store"];
            };
        };
        /** @description single store record */
        "read-store": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-store"];
            };
        };
        /** @description list of users records */
        "list-users": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["list-users"];
            };
        };
        /** @description single users record */
        "read-users": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["read-users"];
            };
        };
        /** @description ping status record */
        "ping-status": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ping-status"];
            };
        };
    };
    parameters: {
        /** @description primary key value */
        pk: string;
        /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter: string[];
        /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include: string;
        /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude: string;
        /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order: string[];
        /** @description Maximum number of results (for top lists). Example: 10 */
        size: string;
        /** @description Page number and page size (comma separated). Example: 1,10 */
        page: string;
        /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join: string[];
    };
    requestBodies: {
        /** @description single actor record */
        "create-actor": {
            content: {
                "application/json": components["schemas"]["create-actor"];
            };
        };
        /** @description single actor record */
        "update-actor": {
            content: {
                "application/json": components["schemas"]["update-actor"];
            };
        };
        /** @description single actor record */
        "increment-actor": {
            content: {
                "application/json": components["schemas"]["increment-actor"];
            };
        };
        /** @description single address record */
        "create-address": {
            content: {
                "application/json": components["schemas"]["create-address"];
            };
        };
        /** @description single address record */
        "update-address": {
            content: {
                "application/json": components["schemas"]["update-address"];
            };
        };
        /** @description single address record */
        "increment-address": {
            content: {
                "application/json": components["schemas"]["increment-address"];
            };
        };
        /** @description single category record */
        "create-category": {
            content: {
                "application/json": components["schemas"]["create-category"];
            };
        };
        /** @description single category record */
        "update-category": {
            content: {
                "application/json": components["schemas"]["update-category"];
            };
        };
        /** @description single category record */
        "increment-category": {
            content: {
                "application/json": components["schemas"]["increment-category"];
            };
        };
        /** @description single city record */
        "create-city": {
            content: {
                "application/json": components["schemas"]["create-city"];
            };
        };
        /** @description single city record */
        "update-city": {
            content: {
                "application/json": components["schemas"]["update-city"];
            };
        };
        /** @description single city record */
        "increment-city": {
            content: {
                "application/json": components["schemas"]["increment-city"];
            };
        };
        /** @description single country record */
        "create-country": {
            content: {
                "application/json": components["schemas"]["create-country"];
            };
        };
        /** @description single country record */
        "update-country": {
            content: {
                "application/json": components["schemas"]["update-country"];
            };
        };
        /** @description single country record */
        "increment-country": {
            content: {
                "application/json": components["schemas"]["increment-country"];
            };
        };
        /** @description single customer record */
        "create-customer": {
            content: {
                "application/json": components["schemas"]["create-customer"];
            };
        };
        /** @description single customer record */
        "update-customer": {
            content: {
                "application/json": components["schemas"]["update-customer"];
            };
        };
        /** @description single customer record */
        "increment-customer": {
            content: {
                "application/json": components["schemas"]["increment-customer"];
            };
        };
        /** @description single film record */
        "create-film": {
            content: {
                "application/json": components["schemas"]["create-film"];
            };
        };
        /** @description single film record */
        "update-film": {
            content: {
                "application/json": components["schemas"]["update-film"];
            };
        };
        /** @description single film record */
        "increment-film": {
            content: {
                "application/json": components["schemas"]["increment-film"];
            };
        };
        /** @description single film_text record */
        "create-film_text": {
            content: {
                "application/json": components["schemas"]["create-film_text"];
            };
        };
        /** @description single film_text record */
        "update-film_text": {
            content: {
                "application/json": components["schemas"]["update-film_text"];
            };
        };
        /** @description single film_text record */
        "increment-film_text": {
            content: {
                "application/json": components["schemas"]["increment-film_text"];
            };
        };
        /** @description single inventory record */
        "create-inventory": {
            content: {
                "application/json": components["schemas"]["create-inventory"];
            };
        };
        /** @description single inventory record */
        "update-inventory": {
            content: {
                "application/json": components["schemas"]["update-inventory"];
            };
        };
        /** @description single inventory record */
        "increment-inventory": {
            content: {
                "application/json": components["schemas"]["increment-inventory"];
            };
        };
        /** @description single language record */
        "create-language": {
            content: {
                "application/json": components["schemas"]["create-language"];
            };
        };
        /** @description single language record */
        "update-language": {
            content: {
                "application/json": components["schemas"]["update-language"];
            };
        };
        /** @description single language record */
        "increment-language": {
            content: {
                "application/json": components["schemas"]["increment-language"];
            };
        };
        /** @description single payment record */
        "create-payment": {
            content: {
                "application/json": components["schemas"]["create-payment"];
            };
        };
        /** @description single payment record */
        "update-payment": {
            content: {
                "application/json": components["schemas"]["update-payment"];
            };
        };
        /** @description single payment record */
        "increment-payment": {
            content: {
                "application/json": components["schemas"]["increment-payment"];
            };
        };
        /** @description single rental record */
        "create-rental": {
            content: {
                "application/json": components["schemas"]["create-rental"];
            };
        };
        /** @description single rental record */
        "update-rental": {
            content: {
                "application/json": components["schemas"]["update-rental"];
            };
        };
        /** @description single rental record */
        "increment-rental": {
            content: {
                "application/json": components["schemas"]["increment-rental"];
            };
        };
        /** @description single staff record */
        "create-staff": {
            content: {
                "application/json": components["schemas"]["create-staff"];
            };
        };
        /** @description single staff record */
        "update-staff": {
            content: {
                "application/json": components["schemas"]["update-staff"];
            };
        };
        /** @description single staff record */
        "increment-staff": {
            content: {
                "application/json": components["schemas"]["increment-staff"];
            };
        };
        /** @description single store record */
        "create-store": {
            content: {
                "application/json": components["schemas"]["create-store"];
            };
        };
        /** @description single store record */
        "update-store": {
            content: {
                "application/json": components["schemas"]["update-store"];
            };
        };
        /** @description single store record */
        "increment-store": {
            content: {
                "application/json": components["schemas"]["increment-store"];
            };
        };
        /** @description single users record */
        "create-users": {
            content: {
                "application/json": components["schemas"]["create-users"];
            };
        };
        /** @description single users record */
        "update-users": {
            content: {
                "application/json": components["schemas"]["update-users"];
            };
        };
        /** @description single users record */
        "increment-users": {
            content: {
                "application/json": components["schemas"]["increment-users"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_actor: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-actor"];
        };
    };
    create_actor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-actor"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_actor: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-actor"];
        };
    };
    update_actor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-actor"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_actor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_actor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-actor"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_actor_info: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-actor_info"];
        };
    };
    list_address: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-address"];
        };
    };
    create_address: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-address"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_address: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-address"];
        };
    };
    update_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-address"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-address"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_category: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-category"];
        };
    };
    create_category: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-category"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_category: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-category"];
        };
    };
    update_category: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-category"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_category: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_category: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-category"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_city: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-city"];
        };
    };
    create_city: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-city"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_city: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-city"];
        };
    };
    update_city: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-city"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_city: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_city: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-city"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_country: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-country"];
        };
    };
    create_country: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-country"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_country: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-country"];
        };
    };
    update_country: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-country"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_country: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_country: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-country"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_customer: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-customer"];
        };
    };
    create_customer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-customer"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_customer: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-customer"];
        };
    };
    update_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-customer"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_customer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-customer"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_customer_list: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-customer_list"];
        };
    };
    list_film: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-film"];
        };
    };
    create_film: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-film"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_film: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-film"];
        };
    };
    update_film: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-film"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_film: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_film: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-film"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_film_actor: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-film_actor"];
        };
    };
    list_film_category: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-film_category"];
        };
    };
    list_film_list: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-film_list"];
        };
    };
    list_film_text: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-film_text"];
        };
    };
    create_film_text: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-film_text"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_film_text: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-film_text"];
        };
    };
    update_film_text: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-film_text"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_film_text: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_film_text: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-film_text"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_inventory: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-inventory"];
        };
    };
    create_inventory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-inventory"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_inventory: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-inventory"];
        };
    };
    update_inventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-inventory"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_inventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_inventory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-inventory"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_language: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-language"];
        };
    };
    create_language: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-language"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_language: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-language"];
        };
    };
    update_language: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-language"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_language: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_language: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-language"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_nicer_but_slower_film_list: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-nicer_but_slower_film_list"];
        };
    };
    list_payment: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-payment"];
        };
    };
    create_payment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-payment"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_payment: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-payment"];
        };
    };
    update_payment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-payment"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_payment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_payment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-payment"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_rental: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-rental"];
        };
    };
    create_rental: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-rental"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_rental: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-rental"];
        };
    };
    update_rental: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-rental"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_rental: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_rental: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-rental"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_sales_by_film_category: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-sales_by_film_category"];
        };
    };
    list_sales_by_store: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-sales_by_store"];
        };
    };
    list_staff: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-staff"];
        };
    };
    create_staff: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-staff"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_staff: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-staff"];
        };
    };
    update_staff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-staff"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_staff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_staff: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-staff"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_staff_list: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-staff_list"];
        };
    };
    list_store: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-store"];
        };
    };
    create_store: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-store"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_store: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-store"];
        };
    };
    update_store: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-store"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_store: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_store: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-store"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    list_users: {
        parameters: {
            query?: {
                /** @description Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
                filter?: components["parameters"]["filter"];
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Column you want to sort on and the sort direction (comma separated). Example: id,desc */
                order?: components["parameters"]["order"];
                /** @description Maximum number of results (for top lists). Example: 10 */
                size?: components["parameters"]["size"];
                /** @description Page number and page size (comma separated). Example: 1,10 */
                page?: components["parameters"]["page"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["list-users"];
        };
    };
    create_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["create-users"];
        responses: {
            200: components["responses"]["pk_integer"];
        };
    };
    read_users: {
        parameters: {
            query?: {
                /** @description Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
                include?: components["parameters"]["include"];
                /** @description Columns you want to exclude from the output (comma separated). Example: posts.content */
                exclude?: components["parameters"]["exclude"];
                /** @description Paths (comma separated) to related entities that you want to include. Example: comments,users */
                join?: components["parameters"]["join"];
            };
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["read-users"];
        };
    };
    update_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["update-users"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    delete_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    increment_users: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description primary key value */
                id: components["parameters"]["pk"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["increment-users"];
        responses: {
            200: components["responses"]["rows_affected"];
        };
    };
    ping_status: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["ping-status"];
        };
    };
}
